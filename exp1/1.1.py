import numpy as np

class kNNClassifier(object):
    def __init__(self, k):
        '''
        初始化函数
        :param k:kNN算法中的k
        '''
        self.k = k
        # 用来存放训练数据，类型为ndarray
        self.train_feature = None
        # 用来存放训练标签，类型为ndarray
        self.train_label = None


    def fit(self, feature, label):
        '''
        kNN算法的训练过程
        :param feature: 训练集数据，类型为ndarray
        :param label: 训练集标签，类型为ndarray
        :return: 无返回
        '''

        #********* Begin *********#
        self.train_feature=feature
        self.train_label=label
        #********* End *********#


    def predict(self, feature):
        '''
        kNN算法的预测过程
        :param feature: 测试集数据，类型为ndarray
        :return: 预测结果，类型为ndarray或list
        '''

        #********* Begin *********#
        result=[]
        for feat in feature:
            #计算每个向量的欧式距离
            e=self.train_feature-feat
            sp_e=e**2
            distance=sp_e.sum(axis=1)**0.5
            #将欧式距离升序排序获得索引
            distance_index=distance.argsort()
            #使用索引数组进行索引，使得标签按照欧氏距离进行排序
            sorted_lables=self.train_label[distance_index]
            #用于存放训练集中前k个数据清点的结果
            data_count={}
            for i in range(self.k):
                lable=sorted_lables[i]
                #如果之前没有记录过该类型，则数目为1，若之前记录过该类型，则数目为原数目加1
                data_count[lable]=data_count.get(lable,0)+1
            #按照出现的次数对字典进行排序,则返回的是一个含有元组的数组，sort_class_count[0][0]为训练集中出现最多的种类
            sort_data_count=sorted(data_count.items(),key=lambda x:x[1],reverse=True)
            #出现最多的种类即为我们所预测的种类，将其加入结果中
            result.append(sort_data_count[0][0])
        return result





        #********* End *********#
feats = np.array([[6.5, 2.8, 4.6, 1.5],
                  [6.7, 2.5, 5.8, 1.8],
                  [6.8, 3.0, 5.5, 2.1],
                  [5.1, 3.5, 1.4, 0.3],
                  [6.0, 2.2, 5.0, 1.5],
                  [6.3, 2.9, 5.6, 1.8],
                  [6.6, 2.9, 4.6, 1.3],
                  [7.7, 2.6, 6.9, 2.3],
                  [5.7, 3.8, 1.7, 0.3],
                  [5.0, 3.6, 1.4, 0.2],
                  [4.8, 3.0, 1.4, 0.3],
                  [5.2, 2.7, 3.9, 1.4],
                  [5.1, 3.4, 1.5, 0.2],
                  [5.5, 3.5, 1.3, 0.2],
                  [7.7, 3.8, 6.7, 2.2],
                  [6.9, 3.1, 5.4, 2.1],
                  [7.3, 2.9, 6.3, 1.8],
                  [6.4, 2.8, 5.6, 2.2],
                  [6.2, 2.8, 4.8, 1.8],
                  [6.0, 3.4, 4.5, 1.6],
                  [7.7, 2.8, 6.7, 2.0],
                  [5.7, 3.0, 4.2, 1.2],
                  [4.8, 3.4, 1.6, 0.2],
                  [5.7, 2.5, 5.0, 2.0],
                  [6.3, 2.7, 4.9, 1.8],
                  [4.8, 3.0, 1.4, 0.1],
                  [4.7, 3.2, 1.3, 0.2],
                  [6.5, 3.0, 5.8, 2.2],
                  [4.6, 3.4, 1.4, 0.3],
                  [6.1, 3.0, 4.9, 1.8],
                  [6.5, 3.2, 5.1, 2.0],
                  [6.7, 3.1, 4.4, 1.4],
                  [5.7, 2.8, 4.5, 1.3],
                  [6.7, 3.3, 5.7, 2.5],
                  [6.0, 3.0, 4.8, 1.8],
                  [5.1, 3.8, 1.6, 0.2],
                  [6.0, 2.2, 4.0, 1.0],
                  [6.4, 2.9, 4.3, 1.3],
                  [6.5, 3.0, 5.5, 1.8],
                  [5.0, 2.3, 3.3, 1.0],
                  [6.3, 3.3, 6.0, 2.5],
                  [5.5, 2.5, 4.0, 1.3],
                  [5.4, 3.7, 1.5, 0.2],
                  [4.9, 3.1, 1.5, 0.1],
                  [5.2, 4.1, 1.5, 0.1],
                  [6.7, 3.3, 5.7, 2.1],
                  [4.4, 3.0, 1.3, 0.2],
                  [6.0, 2.7, 5.1, 1.6],
                  [6.4, 2.7, 5.3, 1.9],
                  [5.9, 3.0, 5.1, 1.8],
                  [5.2, 3.5, 1.5, 0.2],
                  [5.1, 3.3, 1.7, 0.5],
                  [5.8, 2.7, 4.1, 1.0],
                  [4.9, 3.1, 1.5, 0.1],
                  [7.4, 2.8, 6.1, 1.9],
                  [6.2, 2.9, 4.3, 1.3],
                  [7.6, 3.0, 6.6, 2.1],
                  [6.7, 3.0, 5.2, 2.3],
                  [6.3, 2.3, 4.4, 1.3],
                  [6.2, 3.4, 5.4, 2.3],
                  [7.2, 3.6, 6.1, 2.5],
                  [5.6, 2.9, 3.6, 1.3],
                  [5.7, 4.4, 1.5, 0.4],
                  [5.8, 2.7, 3.9, 1.2],
                  [4.5, 2.3, 1.3, 0.3],
                  [5.5, 2.4, 3.8, 1.1],
                  [6.9, 3.1, 4.9, 1.5],
                  [5.0, 3.4, 1.6, 0.4],
                  [6.8, 2.8, 4.8, 1.4],
                  [5.0, 3.5, 1.6, 0.6],
                  [4.8, 3.4, 1.9, 0.2],
                  [6.3, 3.4, 5.6, 2.4],
                  [5.6, 2.8, 4.9, 2.0],
                  [6.8, 3.2, 5.9, 2.3],
                  [5.0, 3.3, 1.4, 0.2],
                  [5.1, 3.7, 1.5, 0.4],
                  [5.9, 3.2, 4.8, 1.8],
                  [4.6, 3.1, 1.5, 0.2],
                  [5.8, 2.7, 5.1, 1.9],
                  [4.8, 3.1, 1.6, 0.2],
                  [6.5, 3.0, 5.2, 2.0],
                  [4.9, 2.5, 4.5, 1.7],
                  [4.6, 3.2, 1.4, 0.2],
                  [6.4, 3.2, 5.3, 2.3],
                  [4.3, 3.0, 1.1, 0.1],
                  [5.6, 3.0, 4.1, 1.3],
                  [4.4, 2.9, 1.4, 0.2],
                  [5.5, 2.4, 3.7, 1.0],
                  [5.0, 2.0, 3.5, 1.0],
                  [5.1, 3.5, 1.4, 0.2],
                  [4.9, 3.0, 1.4, 0.2],
                  [4.9, 2.4, 3.3, 1.0],
                  [4.6, 3.6, 1.0, 0.2],
                  [5.9, 3.0, 4.2, 1.5],
                  [6.1, 2.9, 4.7, 1.4],
                  [5.0, 3.4, 1.5, 0.2],
                  [6.7, 3.1, 4.7, 1.5],
                  [5.7, 2.9, 4.2, 1.3],
                  [6.2, 2.2, 4.5, 1.5],
                  [7.0, 3.2, 4.7, 1.4],
                  [5.8, 2.7, 5.1, 1.9],
                  [5.4, 3.4, 1.7, 0.2],
                  [5.0, 3.0, 1.6, 0.2],
                  [6.1, 2.6, 5.6, 1.4],
                  [6.1, 2.8, 4.0, 1.3],
                  [7.2, 3.0, 5.8, 1.6],
                  [5.7, 2.6, 3.5, 1.0],
                  [6.3, 2.8, 5.1, 1.5],
                  [6.4, 3.1, 5.5, 1.8],
                  [6.3, 2.5, 4.9, 1.5],
                  [6.7, 3.1, 5.6, 2.4],
                  [4.9, 3.1, 1.5, 0.1]])
labels = np.array([1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 2, 2, 0, 0, 2, 0, 2, 2, 1, 1, 2, 0, 1,
                   1, 2, 1, 2, 1, 0, 0, 0, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 2, 2,
                   0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2,
                   0, 0])
test = np.array([[5.8, 4.0, 1.2, 0.2],
                 [5.1, 2.5, 3.0, 1.1],
                 [6.6, 3.0, 4.4, 1.4],
                 [5.4, 3.9, 1.3, 0.4],
                 [7.9, 3.8, 6.4, 2.0],
                 [6.3, 3.3, 4.7, 1.6],
                 [6.9, 3.1, 5.1, 2.3],
                 [5.1, 3.8, 1.9, 0.4],
                 [4.7, 3.2, 1.6, 0.2],
                 [6.9, 3.2, 5.7, 2.3],
                 [5.6, 2.7, 4.2, 1.3],
                 [5.4, 3.9, 1.7, 0.4],
                 [7.1, 3.0, 5.9, 2.1],
                 [6.4, 3.2, 4.5, 1.5],
                 [6.0, 2.9, 4.5, 1.5],
                 [4.4, 3.2, 1.3, 0.2],
                 [5.8, 2.6, 4.0, 1.2],
                 [5.6, 3.0, 4.5, 1.5],
                 [5.4, 3.4, 1.5, 0.4],
                 [5.0, 3.2, 1.2, 0.2],
                 [5.5, 2.6, 4.4, 1.2],
                 [5.4, 3.0, 4.5, 1.5],
                 [6.7, 3.0, 5.0, 1.7],
                 [5.0, 3.5, 1.3, 0.3],
                 [7.2, 3.2, 6.0, 1.8],
                 [5.7, 2.8, 4.1, 1.3],
                 [5.5, 4.2, 1.4, 0.2],
                 [5.1, 3.8, 1.5, 0.3],
                 [6.1, 2.8, 4.7, 1.2],
                 [6.3, 2.5, 5.0, 1.9],
                 [6.1, 3.0, 4.6, 1.4],
                 [7.7, 3.0, 6.1, 2.3],
                 [5.6, 2.5, 3.9, 1.1],
                 [6.4, 2.8, 5.6, 2.1],
                 [5.8, 2.8, 5.1, 2.4],
                 [5.3, 3.7, 1.5, 0.2],
                 [5.5, 2.3, 4.0, 1.3],
                 [5.2, 3.4, 1.4, 0.2]])


classifier = kNNClassifier(3)
classifier.fit(feats, labels)

result = classifier.predict(test)

print(result)